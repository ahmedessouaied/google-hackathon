import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import os
import datetime
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.utils import formatdate
import groq
from groq import Groq

# Configuration constants
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USERNAME = 'wassimderwich0@gmail.com'  
EMAIL_PASSWORD = 'arib ylpy zwzj byvy'
RECIPIENT_EMAIL = 'wassimderwich0@gmail.com'  # Fixed recipient email

# Google Calendar API setup
SCOPES = ['https://www.googleapis.com/auth/calendar']
TOKEN_PATH = 'token.json'
CREDENTIALS_FILE = 'client_secret_313493770441-g69dggcun71k19479t10v7cjvc7m7r8u.apps.googleusercontent.com.json'
REDIRECT_URI = 'http://localhost:8501/'

# Set page configuration
st.set_page_config(
    page_title="Diabetes Risk Analysis Dashboard",
    page_icon="ðŸ©º",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for styling
st.markdown("""
<style>
    /* Your existing CSS styles */
</style>
""", unsafe_allow_html=True)

# Load the model
@st.cache_resource
def load_model():
    """Load the trained model and scaler"""
    class DiabetesModel:
        def predict_proba(self, X):
            risk_scores = []
            for row in X:
                glucose = row[1]  # Glucose
                bmi = row[5]     # BMI
                age = row[7]     # Age
                
                base_score = 0.3
                if glucose > 140: base_score += 0.2
                if bmi > 30: base_score += 0.15
                if age > 45: base_score += 0.15
                
                risk_scores.append([1-base_score, base_score])
            
            return np.array(risk_scores)
    
    return DiabetesModel()

model = load_model()

# Initialize session state
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'calendar_service' not in st.session_state:
    st.session_state.calendar_service = None

# Email sending function
def send_schedule_email(schedule, risk_percentage):
    """Send the generated schedule via email with a nice template"""
    try:
        # Create email message
        msg = MIMEMultipart('alternative')
        msg['From'] = EMAIL_USERNAME
        msg['To'] = RECIPIENT_EMAIL
        msg['Date'] = formatdate(localtime=True)
        msg['Subject'] = f"Diabetes Prevention Plan (Risk: {risk_percentage}%)"
        
        # HTML email template
        html = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .header {{ background-color: #3498DB; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                .schedule {{ background-color: #f5f5f5; padding: 15px; border-radius: 5px; }}
                .footer {{ margin-top: 20px; font-size: 12px; color: #777; text-align: center; }}
                .risk-high {{ color: #E74C3C; font-weight: bold; }}
                .risk-medium {{ color: #F39C12; font-weight: bold; }}
                .risk-low {{ color: #27AE60; font-weight: bold; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Diabetes Prevention Plan</h1>
                <p>New patient assessment completed</p>
            </div>
            
            <div class="content">
                <p>A new diabetes risk assessment has been completed with the following results:</p>
                
                <p>Diabetes risk score: 
                    <span class="{'risk-high' if risk_percentage >= 50 else 'risk-medium' if risk_percentage >= 30 else 'risk-low'}">
                    {risk_percentage}%</span>
                </p>
                
                <h2>Generated Weekly Schedule</h2>
                <div class="schedule">
                    {schedule.replace('\n', '<br>')}
                </div>
            </div>
            
            <div class="footer">
                <p>This email was automatically generated by the Diabetes Risk Analysis Dashboard</p>
                <p>Â© {datetime.datetime.now().year} Health Analytics Team</p>
            </div>
        </body>
        </html>
        """
        
        # Attach HTML version
        msg.attach(MIMEText(html, 'html'))
        
        # Connect to SMTP server and send
        with smtplib.SMTP(EMAIL_HOST, EMAIL_PORT) as server:
            server.starttls()
            server.login(EMAIL_USERNAME, EMAIL_PASSWORD)
            server.sendmail(EMAIL_USERNAME, RECIPIENT_EMAIL, msg.as_string())
        
        return True
    except Exception as e:
        st.error(f"Error sending email: {str(e)}")
        return False

# Google Calendar Authentication
def authenticate_google_calendar():
    """Authenticate with Google Calendar API"""
    creds = None
    
    if os.path.exists(TOKEN_PATH):
        try:
            creds = Credentials.from_authorized_user_file(TOKEN_PATH, SCOPES)
        except Exception as e:
            st.error(f"Error loading credentials: {e}")
            return None
    
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
            except Exception as e:
                st.error(f"Error refreshing token: {e}")
                return None
        else:
            try:
                flow = InstalledAppFlow.from_client_secrets_file(
                    CREDENTIALS_FILE, 
                    SCOPES,
                    redirect_uri=REDIRECT_URI
                )
                creds = flow.run_local_server(port=8501)
            except Exception as e:
                st.error(f"Error during authentication: {e}")
                return None
        
        try:
            with open(TOKEN_PATH, 'w') as token:
                token.write(creds.to_json())
        except Exception as e:
            st.error(f"Error saving credentials: {e}")
            return None
    
    try:
        return build('calendar', 'v3', credentials=creds)
    except Exception as e:
        st.error(f"Error building calendar service: {e}")
        return None

# Function to create calendar events
def create_weekly_schedule_events(schedule, days=7):
    """Create calendar events for the schedule"""
    if not st.session_state.calendar_service:
        st.error("Google Calendar service not available")
        return False
    
    service = st.session_state.calendar_service
    
    try:
        event_links = []
        timezone = 'America/New_York'
        
        for day in range(days):
            event_date = datetime.datetime.now() + datetime.timedelta(days=day)
            day_name = event_date.strftime("%A")
            
            start_time = datetime.datetime(
                event_date.year, event_date.month, event_date.day, 9, 0, 0
            )
            end_time = datetime.datetime(
                event_date.year, event_date.month, event_date.day, 10, 0, 0
            )
            
            event = {
                'summary': f'Diabetes Prevention - Day {day+1} ({day_name})',
                'description': schedule,
                'start': {'dateTime': start_time.isoformat(), 'timeZone': timezone},
                'end': {'dateTime': end_time.isoformat(), 'timeZone': timezone},
                'reminders': {'useDefault': True},
            }
            
            created_event = service.events().insert(calendarId='primary', body=event).execute()
            event_links.append(created_event.get('htmlLink'))
            
        return event_links
    except Exception as e:
        st.error(f"Error creating calendar events: {str(e)}")
        return []

# LLM Function to generate schedule
def get_schedule_from_llm(metrics_data):
    """Get personalized schedule from LLM"""
    try:
        client = Groq(api_key="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")

        prompt = f"""
        Based on these health metrics, create a personalized weekly schedule to help prevent diabetes.
        Include specific dietary recommendations, exercise routines, and lifestyle adjustments.
        Make the schedule practical with exact times and activities.

        Metrics:
        {metrics_data}
        """

        response = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=[
                {"role": "system", "content": "You are a helpful health assistant."},
                {"role": "user", "content": prompt}
            ]
        )

        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Error getting schedule from LLM: {str(e)}")
        return """Sample schedule for testing purposes."""

# Sidebar inputs
st.sidebar.markdown("<div class='sub-header'>Patient Information</div>", unsafe_allow_html=True)

pregnancies = st.sidebar.slider("Pregnancies", 0, 17, 3)
glucose = st.sidebar.slider("Glucose", 50, 200, 120)
blood_pressure = st.sidebar.slider("Blood Pressure", 40, 180, 70)
skin_thickness = st.sidebar.slider("Skin Thickness", 0, 100, 20)
insulin = st.sidebar.slider("Insulin", 0, 850, 79)
bmi = st.sidebar.slider("BMI", 0.0, 70.0, 32.0, step=0.1)
diabetes_pedigree = st.sidebar.slider("Diabetes Pedigree Function", 0.0, 2.5, 0.47, step=0.01)
age = st.sidebar.slider("Age", 21, 90, 33)

# Authentication button
if st.sidebar.button("Connect Google Calendar"):
    with st.spinner("Connecting..."):
        service = authenticate_google_calendar()
        if service:
            st.session_state.calendar_service = service
            st.session_state.authenticated = True
            st.sidebar.success("Connected to Google Calendar!")
        else:
            st.sidebar.error("Failed to connect")

analyze_button = st.sidebar.button("Analyze Risk")

# Main dashboard
st.markdown("<div class='main-header'>Diabetes Risk Analysis Dashboard</div>", unsafe_allow_html=True)

st.markdown("""
<div class='info-box'>
This dashboard analyzes diabetes risk factors and generates personalized prevention plans.
Results will be automatically sent to our health team.
</div>
""", unsafe_allow_html=True)

if analyze_button:
    # Create input data
    input_data = np.array([[pregnancies, glucose, blood_pressure, skin_thickness, 
                          insulin, bmi, diabetes_pedigree, age]])
    
    input_df = pd.DataFrame(input_data, columns=[
        'Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
        'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age'
    ])
    
    # Make prediction
    prediction_proba = model.predict_proba(input_data)
    risk_percentage = round(prediction_proba[0][1] * 100, 1)
    metrics_data = input_df.to_dict(orient='records')[0]
    schedule = get_schedule_from_llm(metrics_data)
    
    # Automatically send email
    with st.spinner("Sending results to health team..."):
        if send_schedule_email(schedule, risk_percentage):
            st.success("Results sent to health team successfully!")
        else:
            st.error("Failed to send results automatically")
    
    # Display results
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("<div class='sub-header'>Risk Assessment</div>", unsafe_allow_html=True)
        
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=risk_percentage,
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "Diabetes Risk Score"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 30], 'color': 'green'},
                    {'range': [30, 70], 'color': 'yellow'},
                    {'range': [70, 100], 'color': 'red'}
                ],
            }
        ))
        st.plotly_chart(fig, use_container_width=True)
        
        if risk_percentage >= 50:
            st.markdown(f"<div class='risk-high'>High Risk: {risk_percentage}%</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div class='risk-low'>Low Risk: {risk_percentage}%</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='sub-header'>Your Metrics Radar Chart</div>", unsafe_allow_html=True)
        
        columns_to_normalize = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction']
        input_normalized = input_df.copy()
        
        normalization_ranges = {
            'Glucose': [70, 200],
            'BloodPressure': [40, 180],
            'SkinThickness': [0, 100],
            'Insulin': [0, 850],
            'BMI': [0, 70],
            'DiabetesPedigreeFunction': [0, 2.5]
        }
        
        for col in columns_to_normalize:
            min_val, max_val = normalization_ranges[col]
            input_normalized[col] = (input_df[col] - min_val) / (max_val - min_val)
        
        radar_data = input_normalized[columns_to_normalize].iloc[0].tolist()
        radar_data.append(radar_data[0])
        categories = columns_to_normalize + [columns_to_normalize[0]]
        
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(
            r=radar_data,
            theta=categories,
            fill='toself',
            line_color='blue',
            fillcolor='rgba(55, 128, 191, 0.3)'
        ))
        st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("<div class='sub-header'>Personalized Prevention Schedule</div>", unsafe_allow_html=True)
    st.text_area("Generated Schedule", value=schedule, height=300)
    
    if st.session_state.authenticated and st.button("Add to Google Calendar"):
        with st.spinner("Creating calendar events..."):
            event_links = create_weekly_schedule_events(schedule)
            if event_links:
                st.success("Events added to Google Calendar!")
            else:
                st.error("Failed to add events")

else:
    st.markdown("""
    <div style='text-align:center;padding:30px;'>
        <img src="https://img.icons8.com/color/96/000000/diabetes.png" style='width:80px;'>
        <h2>Welcome to the Diabetes Risk Analysis Dashboard</h2>
        <p style='font-size:18px;color:#555;margin-bottom:30px;'>
            Complete your health assessment to receive a personalized prevention plan.
        </p>
    </div>
    """, unsafe_allow_html=True)